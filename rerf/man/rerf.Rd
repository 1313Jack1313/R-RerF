% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rerf.R
\name{rerf}
\alias{rerf}
\title{RerF Forest Generator}
\usage{
rerf(X, Y, nClasses, MinParent = 6L, trees = 100L, MaxDepth = 0L,
  bagging = 0.2, replacement = TRUE, stratify = FALSE, FUN = makeA,
  options = c(ncol(X), round(ncol(X)^0.5), 1L, 1/ncol(X)),
  rank.transform = FALSE, COOB = FALSE, CNS = FALSE, Progress = FALSE,
  rotate = F, num.cores = 0L, seed = 1L)
}
\arguments{
\item{X}{an n by d numeric matrix (preferable) or data frame. The rows correspond to observations and columns correspond to features.}

\item{Y}{an n length vector of class labels.  Class labels must be integer or numeric and be within the range 1 to the number of classes.}

\item{nClasses}{an integer specifying the number of unique class labels. This should be the number of possibly observable class labels, even if only a subset is actually observed in Y.}

\item{MinParent}{the minimum splittable node size.  A node size < MinParent will be a leaf node. (MinParent = 6)}

\item{trees}{the number of trees in the forest. (trees=100)}

\item{MaxDepth}{the longest allowable distance from the root of a tree to a leaf node (i.e. the maximum allowed height for a tree).  If MaxDepth=0, the tree will be allowed to grow without bound.  (MaxDepth=0)}

\item{bagging}{a non-zero value means a random sample of X will be used during tree creation.  If replacement = FALSE the bagging value determines the percentage of samples to leave out-of-bag.  If replacement = TRUE the non-zero bagging value is ignored. (bagging=.2)}

\item{replacement}{if TRUE then n samples are chosen, with replacement, from X. (replacement=TRUE)}

\item{stratify}{if TRUE then class sample proportions are maintained during the random sampling.  Ignored if replacement = FALSE. (stratify = FALSE).}

\item{FUN}{a function that creates the random projection matrix. (FUN=makeA)}

\item{options}{a list of parameters to be used by FUN. (options=c(ncol(X), round(ncol(X)^.5),1L, 1/ncol(X)))}

\item{rank.transform}{if TRUE then each feature is rank-transformed (i.e. smallest value becomes 1 and largest value becomes n) (rank.transform=FALSE)}

\item{COOB}{if TRUE then the samples omitted during the creation of a tree are stored as part of the tree.  This is required to run OOBPredict(). (COOB=FALSE)}

\item{CNS}{if TRUE then the number of training observations at each node is stored. This is required to run FeatureImportance() (CNS=FALSE)}

\item{Progress}{if TRUE then a pipe is printed after each tree is created.  This is useful for large datasets. (Progress=FALSE)}

\item{rotate}{if TRUE then the data matrix X is uniformly randomly rotated for each tree. (rotate=FALSE)}

\item{num.cores}{the number of cores to use while training. If num.cores=0 then 1 less than the number of cores reported by the OS are used. (num.cores=0)}

\item{seed}{the seed to use for training the forest. (seed=1)}
}
\value{
Forest
}
\description{
Creates a decision forest based on an input matrix and class vector.  This is the main function in the rerf package.
}
\examples{
library(rerf)
trainedForest <- rerf(as.matrix(iris[,1:4]), as.numeric(iris[,5]), 5, num.cores=1)

}
\author{
James and Tyler, jbrowne6@jhu.edu and
}
